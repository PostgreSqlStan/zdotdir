pbnote () {
	# zshoptions setup
	local flag_help flag_input flag_nonewline flag_nopaste
	local arg_title
	local usage=(
		"Usage:"
		"  pbnote                       add entry to default note"
		"  pbnote <note name>           add entry named note"
		"Options:"
		"  -h --help                    show this message"
		"  -i --input                   prompt for description"
		"  -n --no-newline              no empty line before entry"
		"  -t --title <title>           entry title"
		"  -v --paste                   insert clipboard (copied text)"
	)
	zmodload zsh/zutil
	zparseopts -D -F -- \
		{h,-help}=flag_help \
		{i,-input}=flag_input \
		{n,-no-newline}=flag_nonewline \
		{t,-title}:=arg_title \
		{v,-paste}=flag_paste \
		|| return 1
	[[ -z "$flag_help" ]] || { print -l $usage && return }

	# -- main --
	# env PARAMETERS
	local note_home=${NOTE_HOME:-~/notes}
	local note_name=(${*:-${NOTE_NAME:-'pasted-'$(date "+%Y-%m-%d")}})
	local note_template
	[[ -n "$NOTE_TEMPLATE" ]] && note_template=($NOTE_template) \
	  || note_template=(
	    '[$(date)] ${title}'
	    '${input}'
	    '${pasted}'
	    )

	local separator=${NOTE_SEPARATOR:-'\n'}  # entry separator
	local title=${arg_title[-1]}

	local pasted
	[[ -n "$flag_paste" ]] && pasted=$(pbpaste | col -b)

	local input
	if [[ -n "$flag_input" ]]; then
		print -- "title: ${title}"
		print 'Enter description (^d=exit, ^c=cancel):'
		input=$(cat -)
	fi

	if [[ -a "${note_home}/${note_name}" ]]; then
		if [[ -z "${flag_nonewline}" ]]; then  # insert separator if needed
			note_template[1]=${separator}${note_template[1]}
		fi
	fi

	# assemble note entry
	local output
	local item_sep='' # no separator before 1st line
	for item in $note_template
	do
		line=$(eval "print -- \"${item}\"")
		[[ -n "$line" ]] \
			&& output="${output}"${item_sep}${line}
		item_sep=${separator}
	done

	# insert note entry
    print $output >> ${note_home}/${note_name}
}


note () {
	local flag_help
	local flag_edit
	local usage=(
		"Usage:"
		"  note                         list notes"
		"  note <name>                  show note"
		"Options:"
		"  -e --edit <name>             edit note"
		"  -h --help                    show this message"
	)
	zmodload zsh/zutil
	zparseopts -D -F -- \
		{h,-help}=flag_help \
		{e,-edit}=flag_edit \
		|| return 1
	[[ -z "$flag_help" ]] || { print -l $usage && return }

	local note_home=${NOTE_HOME:-~/notes}
	local editor=(${VISUAL:-${EDITOR:-vi}})

	if [[ -n $* ]]; then
		(
			cd ${note_home}
			if [[ -n "$flag_edit" ]]; then
				eval ${editor} $*
			else
				less -FX $*
			fi
		)
	else
		ls ${note_home}
	fi
}
alias n='note'
