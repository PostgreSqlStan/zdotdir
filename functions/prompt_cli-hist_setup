zmodload -i zsh/parameter || return 1

# edited copy of /usr/share/zsh/5.9/functions/prompt_bart_setup

integer -g PSCOL=1
typeset -g PSCMD=

prompt_bart_preexec () {
    setopt localoptions noxtrace noshwordsplit noksharrays unset
    local -a cmd; cmd=( ${(z)3} )
    if [[ $cmd[1] = fg ]]
    then
	shift cmd
	cmd[1]=${cmd[1]:-%+}
    fi
    if [[ $#cmd -eq 1 && $cmd[1] = %* ]]
    then
	PSCMD=$jobtexts[$cmd[1]]
    elif [[ -o autoresume && -n $jobtexts[%?$2] ]]
    then
	PSCMD=$jobtexts[%?$2]
    else
	# Use history text to avoid alias expansion
	PSCMD=$history[$HISTCMD]
    fi
    return 0
}

prompt_bart_precmd () {
    setopt localoptions noxtrace noksharrays unset
    local zero='%([BSUbfksu]|[FB]{*})' escape colno lineno

    : "${PSCMD:=$history[$[HISTCMD-1]]}"	# Default to history text

    # Using psvar here protects against unwanted promptsubst expansions.

    psvar[7]="$PSCMD"
    psvar[8]=''		# No padding until we compute it
    psvar[9]=()

    # Reset the truncation widths for upcoming computations
    ((PSCOL == 1)) || { PSCOL=1 ; prompt_bart_ps1 }
    if [[ -o promptcr ]]
    then
	# Emulate the 4.3.x promptsp option if it isn't available
	eval '[[ -o promptsp ]] 2>/dev/null' ||
	    print -nP "${(l.COLUMNS.. .)}\e[s${(pl.COLUMNS..\b.)}%E\e[u" >$TTY
    else IFS='[;' read -s -d R escape\?$'\e[6n' lineno PSCOL <$TTY
    fi
    ((PSCOL == 1)) || prompt_bart_ps1
    ((colno = COLUMNS-PSCOL))

    # Compute the size of the upper left prompt and set psvar[9] if needed.
    ((${#${(f)${(%%)${(S)PS1//$~zero/}}}[1]} > colno)) && psvar[9]=''

    # Compute and set the padding between upper left and right prompts.
    (((colno -= ${#${(f)${(%%)${(S)PS1//$~zero/}}}[1]}) > 0)) &&
	psvar[8]=${(l:colno:: :)}
}

prompt_bart_ps1 () {
    setopt localoptions noxtrace noksharrays

    local -ah ps1
    local -h host hist1 hist2 dir space date time rs="%b%f%k"
    local -h eon="%(?.[.%20(?.[%U.%S[))" eoff="%(?.].%20(?.%u].]%s))"

    # Set up the components of the upper line
    host="%{$fg[%m]%}%m$rs"
    hist1="%9(v. . %{$fg[%h]%}$eon%7v$eoff$rs )"
    hist2=$'%9(v.\n'"%{$fg[%h]%}$eon%7v$eoff$rs.)"
    dir="%{$fg[%~]%}%8~$rs"
    space=%8v
    date="%{$fg[%D]%}%D$rs"	# Prefer "%{$fg[%D]%}%W$rs" in the USA?
    time="%{$fg[%@]%}%@$rs"

    # This is just a tad silly ...
    [[ $prompt_theme[1] = oliver ]] && PS1='[%h%0(?..:%?)]%# ' ||
	PS1=${PS1//$prompt_newline/$'\n'}

    # Assemble the new prompt
    ps1=( ${(f)PS1} )		# Split the existing prompt at newlines
    ps1=(
	"%$[COLUMNS-PSCOL]>..>"	# Begin truncation (upper left prompt)
	"$host"
	"$hist1"		# Empty when too wide for one line
	"$dir"
	"%<<"			# End truncation (end upper left prompt)
	"$space"		# Pad line to upper right position
	"%$[COLUMNS-PSCOL-15](l. . $date)"
	"%$[COLUMNS-PSCOL-7](l.. $time)"
	"$hist2"		# Empty when $hist1 is not empty
	$'\n'
	$ps1[-1]		# Keep last line of the existing prompt
	)
    PS1="${(j::)ps1}"
}

prompt_bart_winch () {
    setopt localoptions nolocaltraps noksharrays unset

    # Delete ourself from TRAPWINCH if not using our precmd insert.
    [[ $precmd_functions = *prompt_bart_precmd* ]] && prompt_bart_ps1 ||
	functions[TRAPWINCH]="${functions[TRAPWINCH]//prompt_bart_winch}"
}

prompt_cli-hist_setup () {
    setopt localoptions nolocaltraps noksharrays unset
    typeset -gA fg

    # A few extra niceties ...
    repeat 1; do case "$1:l" in
      (off|disable)
	add-zsh-hook -D precmd "prompt_*_precmd"
	add-zsh-hook -D preexec "prompt_*_preexec"
	functions[TRAPWINCH]="${functions[TRAPWINCH]//prompt_bart_winch}"
	[[ $prompt_theme[1] = cli-hist ]] && PS1=${${(f)PS1}[-1]}
	return 1	# Prevent change of $prompt_theme
	;;
      (on|enable)
	shift
	[[ $prompt_theme[1] = cli-hist ]] && break
	;&
      (*)
	# Use the fg assoc to hold our selected colors ...
	# This used to be provided by the function colors, but is now
	# set directly from here.  There should be no clash if both
	# are in use.
	fg[%m]="%F{${1:-default}}"
	fg[%h]="%F{${2:-green}}"
	fg[%~]="%F{${3:-default}}"
	fg[%D]="%F{${4:-yellow}}"
	fg[%@]="%F{${1:-default}}"
	;;
    esac; done

    prompt_bart_ps1

    if (($# > 4))
    then
	# No RPS1 by default because prompt_off_setup doesn't fix it.
	if (($#RPS1))
	then
	    RPS1="%F{$5}$RPS1%f"
	fi
	# RPS2 is less obvious so don't mind that it's not restored.
	if (($#RPS2))
	then
	    RPS2="%F{$5}$RPS2%f"
	else
	    RPS2="%F{$5}<${${PS2//\%_/%^}%> }%f"
	    PS2=''
	fi
    fi
    # Paste our special commands into precmd and TRAPWINCH
    
    add-zsh-hook precmd prompt_bart_precmd
    add-zsh-hook preexec prompt_bart_preexec
    prompt_cleanup \
        'functions[TRAPWINCH]="${functions[TRAPWINCH]//prompt_bart_winch}"'
    functions[TRAPWINCH]="${functions[TRAPWINCH]//prompt_bart_winch}
	prompt_bart_winch"

    return 0
}



[[ -o kshautoload ]] || prompt_bart_setup "$@"

